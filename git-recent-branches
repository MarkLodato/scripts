#!/bin/bash
#
# Show git branches and how old each is, sorted by commit date.
#
# Does not show old branches or those beginning with "junk/", but always shows
# the current branch.
#
# Copyright 2013 Mark Lodato <lodato@google.com>
# Released under the MIT license; see LICENSE for details.

# TODO Default since from git-config.
since='3 months ago'
# TODO Default ignore_re from git-config.
ignore_re='^junk/'

SUBDIRECTORY_OK=Yes
OPTIONS_KEEPDASHDASH=
OPTIONS_SPEC="\
git recent-branches
--
since=          ignore branches whose most recent commit was older than this
ignore=         ignore branches whose names match this regular expression
"

. git-sh-setup

while test $# != 0
do
  case "$1" in
    --since) since="$2" ; shift ;;
    --ignore) ignore_re="$2" ; shift ;;
    --) shift ; break ;;
    *) break ;;
  esac
  shift
done

if [[ $# -ne 0 ]]; then
  echo "error: no positional arguments are allowed" >&2
  usage
fi

parse_date() {
  git rev-parse --since="$*" | sed -e 's/^--max-age=//'
}

if [[ -z $since ]]; then
  min_timestamp=0
else
  min_timestamp=$(parse_date "$since")
fi
current_branch=$(git symbolic-ref --short -q HEAD)

# Make sure that the date format is not completely invalid.  `git rev-parse
# --since=...` ignores pieces not understand, replacing those pieces with those
# corresponding to now.  This won't catch things like "yesterday non" (instead
# of "noon"), but it's better than nothing.
if [[ min_timestamp -eq $(parse_date now) ]]; then
  echo "error: invalid timestamp for --since: $since"
  exit 2
fi

git for-each-ref refs/heads --sort=committerdate \
  --format='%(refname:short)|%(committerdate:raw)|%(committerdate:relative)' \
  | while IFS='|' read branch timestamp relative_date
    do
      # $timestamp is of the form "12345 -0500"; we only want the first part.
      if [[ $branch != $current_branch &&
            ( ${timestamp% *} -lt $min_timestamp ||
              ( -n $ignore_re && $branch =~ $ignore_re ) ) ]]; then
        continue
      fi
      start='  '
      end=''
      if [[ $branch = $current_branch ]]; then
        start='* \e[32m'
        end='\e[0m'
      fi
      printf "$start%-30s %s$end\\n" "$branch" "$relative_date"
    done
